// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  telegramId       String   @unique
  username         String?
  cryptoCoins      BigInt   @default(0)
  prestigePoints   Int      @default(0)
  lastActive       DateTime @default(now())
  lastIncomeUpdate DateTime @default(now())
  incomeMultiplier Float    @default(1)
  offlineEarnings  BigInt   @default(0)
  referralCode     String?  @unique
  businesses       Business[]
  upgrades         Upgrade[]
  activeUpgrades   ActiveUpgrade[]
  achievements     Achievement[]
  boosts           Boost[]
  tasks            Task[]
  referrals        Referral[]
}

model Business {
  id             String   @id @default(cuid())
  type           String
  count          Int
  lastCalculated DateTime
  user           User     @relation(fields: [userId], references: [id])
  userId         String

  @@unique([userId, type])
}

model Upgrade {
  id     String @id @default(cuid())
  type   String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model ActiveUpgrade {
  id             String   @id @default(cuid())
  type           String
  expirationTime DateTime
  user           User     @relation(fields: [userId], references: [id])
  userId         String
}

model Achievement {
  id         String   @id @default(cuid())
  type       String
  unlockedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Boost {
  id         String   @id @default(cuid())
  multiplier Float
  endTime    DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Task {
  id           String  @id @default(cuid())
  type         String
  description  String
  url          String
  rewardType   String
  rewardAmount Int
  completed    Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id])
  userId       String
}

model Referral {
  id           String   @id @default(cuid())
  referrer     User     @relation(fields: [referrerId], references: [id])
  referrerId   String
  referredId   String
  dateReferred DateTime @default(now())
  bonusAwarded Boolean  @default(false)

  @@unique([referrerId, referredId])
}